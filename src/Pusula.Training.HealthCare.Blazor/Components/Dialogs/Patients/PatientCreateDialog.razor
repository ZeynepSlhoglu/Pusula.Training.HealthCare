@using Pusula.Training.HealthCare.Addresses
@using Pusula.Training.HealthCare.AppDefaults
@using Pusula.Training.HealthCare.Cities
@using Pusula.Training.HealthCare.Countries
@using Pusula.Training.HealthCare.Districts
@using Pusula.Training.HealthCare.PatientNotes
@using Pusula.Training.HealthCare.Patients
@using Pusula.Training.HealthCare.PatientTypes
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.DataForm
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Notifications
@using Syncfusion.Blazor.Popups

@inherits HealthCareComponentBase

@inject IPatientAppService PatientAppService
@inject IAppDefaultAppService AppDefaultAppService
@inject IPatientTypeAppService PatientTypeAppService
@inject ICountryAppService CountryAppService
@inject ICityAppService CityAppService
@inject IDistrictAppService DistrictAppService

<SfDialog @ref="Dialog" Target="#target" Width="1000px" IsModal ShowCloseIcon Visible="false">
    <DialogTemplates>
        <Header>@L["NewPatient"]</Header>
        <Content>
            <SfDataForm ID="NewPatientForm"
                        Model="@NewPatient"
                        ButtonsAlignment="FormButtonsAlignment.Right"
                        OnValidSubmit="@OnSaveClickAsync"
                        ValidationDisplayMode="FormValidationDisplay.Inline">
                <FormValidator>
                    <DataAnnotationsValidator/>
                </FormValidator>
                <FormTemplate>
                    <SfTab HeaderPlacement="HeaderPosition.Left" LoadOn="ContentLoad.Init" CssClass="e-fill">
                        <TabAnimationSettings>
                            <TabAnimationPrevious Effect="AnimationEffect.None"></TabAnimationPrevious>
                            <TabAnimationNext Effect="AnimationEffect.None"></TabAnimationNext>
                        </TabAnimationSettings>
                        <TabItems>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="@L["Personal"]"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    <div class="row gy-2 px-3">
                                        <div class="col-4">
                                            <label class="e-form-label">@L["Patient:Country"]</label>
                                            <SfAutoComplete @ref="PatientCountryListAutoComplete" TValue="Guid"
                                                            TItem="CountryDto" DataSource="@CountryList"
                                                            Value="@NewPatient.CountryId"
                                                            ValueChanged="PatientCountryIdChangedAsync"
                                                            Placeholder="@L["Patient:Country"]" AllowFiltering Autofill
                                                            Highlight EnableVirtualization PopupHeight="150px"
                                                            ShowPopupButton>
                                                <AutoCompleteFieldSettings Value="Id" Text="Name"/>
                                                <AutoCompleteEvents TValue="Guid" TItem="CountryDto"
                                                                    Filtering="@((args) => DefaultAutoCompleteFilterAsync(PatientCountryListAutoComplete, CountryList, args))"/>
                                            </SfAutoComplete>
                                        </div>

                                        <div class="col-4">
                                            @if (IsForeigner)
                                            {
                                                <label class="e-form-label">@L["PassportNumber"]</label>
                                                <SfTextBox @bind-Value="@NewPatient.PassportNumber"
                                                           Placeholder="@L["PassportNumber"]"
                                                           Type="InputType.Number"></SfTextBox>
                                            } else
                                            {
                                                <label class="e-form-label">@L["IdentityNumber"]</label>
                                                <SfTextBox @bind-Value="@NewPatient.IdentityNumber"
                                                           Placeholder="@L["IdentityNumber"]"
                                                           Type="InputType.Number"></SfTextBox>
                                            }
                                        </div>
                                        <div class="col-4">
                                            <label class="e-form-label">@L["BirthDate"]</label>
                                            <SfDatePicker @bind-Value="@NewPatient.BirthDate"
                                                          Placeholder="@L["BirthDate"]"></SfDatePicker>
                                        </div>

                                        <div class="col-4">
                                            <label class="e-form-label">@L["PatientType"]</label>
                                            <SfDropDownList TItem="PatientTypeDto" TValue="Guid"
                                                            @bind-Value="@NewPatient.PatientTypeId" PopupHeight="150px"
                                                            Placeholder="@L["PatientType"]"
                                                            DataSource="@PatientTypeList">
                                                <DropDownListFieldSettings Value="Id" Text="Name"/>
                                            </SfDropDownList>
                                        </div>
                                        <div class="col-4">
                                            <label class="e-form-label">@L["FirstName"]</label>
                                            <SfTextBox @bind-Value="@NewPatient.FirstName"
                                                       Placeholder="@L["FirstName"]"></SfTextBox>
                                        </div>
                                        <div class="col-4">
                                            <label class="e-form-label">@L["LastName"]</label>
                                            <SfTextBox @bind-Value="@NewPatient.LastName"
                                                       Placeholder="@L["LastName"]"></SfTextBox>
                                        </div>

                                        <div class="col-4">
                                            <label class="e-form-label">@L["EmailAddress"]</label>
                                            <SfTextBox @bind-Value="@NewPatient.EmailAddress"
                                                       Placeholder="@L["EmailAddress"]"
                                                       Type="InputType.Email"></SfTextBox>
                                        </div>
                                        <div class="col-4">
                                            <label class="e-form-label">@L["MobilePhoneNumber"]</label>
                                            <div class="d-flex">
                                                <div class="col-3 gap-1">
                                                    <SfTextBox @bind-Value="@NewPatient.MobilePhoneNumberCode"
                                                               Placeholder="@L["PhoneCode"]"
                                                               CssClass="border-r-r-0"
                                                               Type="InputType.Number"></SfTextBox>
                                                </div>
                                                <div class="col-9">
                                                    <SfTextBox @bind-Value="@NewPatient.MobilePhoneNumber"
                                                               Placeholder="@L["MobilePhoneNumber"]"
                                                               Type="InputType.Number"
                                                               CssClass="border-r-l-0"></SfTextBox>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-4">
                                            <label class="e-form-label">@L["HomePhoneNumber"]</label>
                                            <div class="d-flex">
                                                <div class="col-3 gap-1">
                                                    <SfTextBox @bind-Value="@NewPatient.HomePhoneNumberCode"
                                                               Placeholder="@L["PhoneCode"]"
                                                               CssClass="border-r-r-0"
                                                               Type="InputType.Number"></SfTextBox>
                                                </div>
                                                <div class="col-9">
                                                    <SfTextBox @bind-Value="@NewPatient.HomePhoneNumber"
                                                               Placeholder="@L["HomePhoneNumber"]"
                                                               Type="InputType.Number"
                                                               CssClass="border-r-l-0"></SfTextBox>
                                                </div>
                                            </div>
                                        </div>


                                        <div class="col-4">
                                            <label class="e-form-label">@L["BloodType"]</label>
                                            <SfDropDownList TValue="EnumBloodType" TItem="string"
                                                            @bind-Value="@NewPatient.BloodType" PopupHeight="150px"
                                                            Placeholder="@L["BloodType"]"
                                                            DataSource="@Enum.GetNames(typeof(EnumBloodType))">
                                                <DropDownListFieldSettings Value="EnumBloodType" Text="string"/>
                                            </SfDropDownList>
                                        </div>
                                        <div class="col-4">
                                            <label class="e-form-label">@L["Gender"]</label>
                                            <div class="d-flex mt-2 gap-2">
                                                <SfRadioButton TChecked="EnumGender" @bind-Checked="@NewPatient.Gender"
                                                               Value="@EnumGender.Female.ToString()"
                                                               Label="@L["Gender:Female"]" Name="gender"/>
                                                <SfRadioButton TChecked="EnumGender" @bind-Checked="@NewPatient.Gender"
                                                               Value="@EnumGender.Male.ToString()"
                                                               Label="@L["Gender:Male"]" Name="gender"/>
                                            </div>
                                        </div>
                                        <div class="col-4">
                                            <label class="e-form-label">@L["MaritalStatus"]</label>
                                            <div class="d-flex mt-2 gap-2">
                                                <SfRadioButton TChecked="EnumMaritalStatus"
                                                               @bind-Checked="@NewPatient.MaritalStatus"
                                                               Value="@EnumMaritalStatus.Married.ToString()"
                                                               Label="@L["MaritalStatus:Married"]"
                                                               Name="marital-status"/>
                                                <SfRadioButton TChecked="EnumMaritalStatus"
                                                               @bind-Checked="@NewPatient.MaritalStatus"
                                                               Value="@EnumMaritalStatus.Single.ToString()"
                                                               Label="@L["MaritalStatus:Single"]"
                                                               Name="marital-status"/>
                                            </div>
                                        </div>
                                    </div>
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="@L["Address"]"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    <div class="px-3">
                                        <div class="row">
                                            <div class="col-8">
                                                <SfDataForm
                                                    ID="NewAddressForm"
                                                    Model="@NewAddress"
                                                    ButtonsAlignment="FormButtonsAlignment.Left"
                                                    OnValidSubmit="@AddAddressAsync"
                                                    ValidationDisplayMode="FormValidationDisplay.Inline"
                                                >
                                                    <FormValidator>
                                                        <DataAnnotationsValidator/>
                                                    </FormValidator>
                                                    <FormTemplate>
                                                        <div>
                                                            <div class="row gy-2">
                                                                <div class="col-4">
                                                                    <label
                                                                        class="e-form-label">@L["AddressTitle"]</label>
                                                                    <SfTextBox @bind-Value="@NewAddress.AddressTitle"
                                                                               Placeholder="@L["Placeholder:AddressTitle"]"/>
                                                                </div>

                                                                <div class="col-12 m-0"></div>

                                                                <div class="col-4">
                                                                    <label
                                                                        class="e-form-label">@L["Address:Country"]</label>
                                                                    <SfAutoComplete
                                                                        @ref="AddressCountryListAutoComplete"
                                                                        TValue="Guid"
                                                                        TItem="CountryDto" DataSource="@CountryList"
                                                                        Value="@SelectedAddressCountryId"
                                                                        ValueChanged="AddressCountryIdChangedAsync"
                                                                        Placeholder="@L["Placeholder:Address:Country"]"
                                                                        AllowFiltering Autofill
                                                                        Highlight EnableVirtualization
                                                                        PopupHeight="150px"
                                                                        ShowPopupButton>
                                                                        <AutoCompleteFieldSettings Value="Id"
                                                                                                   Text="Name"/>
                                                                        <AutoCompleteEvents TValue="Guid"
                                                                                            TItem="CountryDto"
                                                                                            Filtering="@((args) => DefaultAutoCompleteFilterAsync(AddressCountryListAutoComplete, CountryList, args))"/>
                                                                    </SfAutoComplete>
                                                                </div>

                                                                <div class="col-4">
                                                                    <label
                                                                        class="e-form-label">@L["Address:City"]</label>
                                                                    <SfAutoComplete @ref="CityListAutoComplete"
                                                                                    TValue="Guid"
                                                                                    TItem="CityDto"
                                                                                    DataSource="@CityList"
                                                                                    Value="@SelectedAddressCityId"
                                                                                    ValueChanged="AddressCityIdChangedAsync"
                                                                                    Placeholder="@L["Placeholder:Address:City"]"
                                                                                    AllowFiltering Autofill
                                                                                    Highlight EnableVirtualization
                                                                                    PopupHeight="150px"
                                                                                    ShowPopupButton>
                                                                        <AutoCompleteFieldSettings Value="Id"
                                                                                                   Text="Name"/>
                                                                        <AutoCompleteEvents TValue="Guid"
                                                                                            TItem="CityDto"
                                                                                            Filtering="@((args) => DefaultAutoCompleteFilterAsync(CityListAutoComplete, CityList, args))"/>
                                                                    </SfAutoComplete>
                                                                </div>

                                                                <div class="col-4">
                                                                    <label
                                                                        class="e-form-label">@L["Address:District"]</label>
                                                                    <SfAutoComplete @ref="DistrictListAutoComplete"
                                                                                    TValue="Guid"
                                                                                    TItem="DistrictDto"
                                                                                    DataSource="@DistrictList"
                                                                                    @bind-Value="@NewAddress.DistrictId"
                                                                                    Placeholder="@L["Placeholder:Address:District"]"
                                                                                    AllowFiltering Autofill
                                                                                    Highlight EnableVirtualization
                                                                                    PopupHeight="150px"
                                                                                    ShowPopupButton>
                                                                        <AutoCompleteFieldSettings Value="Id"
                                                                                                   Text="Name"/>
                                                                        <AutoCompleteEvents TValue="Guid"
                                                                                            TItem="DistrictDto"
                                                                                            Filtering="@((args) => DefaultAutoCompleteFilterAsync(DistrictListAutoComplete, DistrictList, args))"/>
                                                                    </SfAutoComplete>
                                                                </div>

                                                                <div class="col-12">
                                                                    <label
                                                                        class="e-form-label">@L["AddressLine"]</label>
                                                                    <SfTextBox @bind-Value="@NewAddress.AddressLine"
                                                                               Placeholder="@L["Placeholder:AddressLine"]"
                                                                               Multiline/>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </FormTemplate>
                                                    <FormButtons>
                                                        @if (AddressEditingMode)
                                                        {
                                                            <SfButton type="button" CssClass="e-danger"
                                                                      OnClick="@SetDefaultsForAddress">Cancel
                                                            </SfButton>
                                                            <SfButton type="button" CssClass="e-success"
                                                                      OnClick="@SaveAddressEditingAsync">Save
                                                            </SfButton>
                                                        } else
                                                        {
                                                            <SfButton type="submit" CssClass="e-success">Add</SfButton>
                                                        }
                                                    </FormButtons>
                                                </SfDataForm>
                                            </div>

                                            <div class="col-4">
                                                <p class="mb-6p fs-12p fw-700 color-grey-500">@L["Addresses"]</p>
                                                <div class="d-flex flex-column gap-1">
                                                    @foreach (var address in NewPatient.Addresses)
                                                    {
                                                        <SfCard ID="@address.Id.ToString("N")"
                                                                CssClass="@(NewAddress.Id == address.Id ? "selected" : string.Empty)"
                                                                @onclick="@(() => EditAddressAsync(address))">
                                                            <CardContent>
                                                                <div class="d-flex align-items-start">
                                                                    <div class="flex-fill">
                                                                        <h6 class="m-0">@address.AddressTitle</h6>
                                                                        <p class="m-0">@address.AddressLine @address.District.Name @(address.District.City.Name)/@(address.District.City.Country.Name)</p>
                                                                    </div>
                                                                    <SfButton type="button"
                                                                              IconCss="e-icons far fa-trash-alt e-danger"
                                                                              CssClass="e-small e-danger e-flat"
                                                                              OnClick="@(() => RemoveAddressAsync(address))"></SfButton>
                                                                </div>
                                                            </CardContent>
                                                        </SfCard>
                                                    }
                                                </div>
                                                @if (NewPatient.Addresses.Count == 0)
                                                {
                                                    <SfMessage>There is no address added for this patient.
                                                    </SfMessage> // todo
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </ContentTemplate>
                            </TabItem>
                            <TabItem>
                                <ChildContent>
                                    <TabHeader Text="@L["Notes"]"></TabHeader>
                                </ChildContent>
                                <ContentTemplate>
                                    <div class="px-3">
                                        <div class="row">
                                            <div class="col-8">
                                                <SfDataForm
                                                    ID="NewNoteForm"
                                                    Model="NewNote"
                                                    ButtonsAlignment="FormButtonsAlignment.Left"
                                                    OnValidSubmit="@AddNoteAsync"
                                                    ValidationDisplayMode="FormValidationDisplay.Inline"
                                                >
                                                    <FormValidator>
                                                        <DataAnnotationsValidator/>
                                                    </FormValidator>
                                                    <FormTemplate>
                                                        <div>
                                                            <label
                                                                class="e-form-label">@L["Note"]</label>
                                                            <SfTextBox @bind-Value="@NewNote.Note"
                                                                       Placeholder="@L["Note"]" Multiline/>
                                                        </div>
                                                    </FormTemplate>
                                                    <FormButtons>
                                                        @if (NoteEditingMode)
                                                        {
                                                            <SfButton type="button" CssClass="e-danger"
                                                                      OnClick="@CancelNoteEditingAsync">Cancel
                                                            </SfButton>
                                                            <SfButton type="button" CssClass="e-success"
                                                                      OnClick="@SaveNoteEditingAsync">Save
                                                            </SfButton>
                                                        } else
                                                        {
                                                            <SfButton type="submit" CssClass="e-success">Add</SfButton>
                                                        }
                                                    </FormButtons>
                                                </SfDataForm>
                                            </div>

                                            <div class="col-4">
                                                <p class="mb-6p fs-12p fw-700 color-grey-500">@L["Notes"]</p>
                                                <div class="d-flex flex-column gap-1">
                                                    @foreach (var note in NewPatient.Notes)
                                                    {
                                                        <SfCard ID="@note.Id.ToString("N")"
                                                                CssClass="@(NewNote.Id == note.Id ? "selected" : string.Empty)"
                                                                @onclick="@(() => EditNoteAsync(note))">
                                                            <CardContent>
                                                                <div class="d-flex align-items-start">
                                                                    <p class="m-0 flex-fill">@note.Note</p>
                                                                    <SfButton type="button"
                                                                              IconCss="e-icons far fa-trash-alt e-danger"
                                                                              CssClass="e-small e-danger e-flat"
                                                                              OnClick="@(() => RemoveNoteAsync(note))"></SfButton>
                                                                </div>
                                                            </CardContent>
                                                        </SfCard>
                                                    }
                                                </div>
                                                @if (NewPatient.Notes.Count == 0)
                                                {
                                                    <SfMessage>There is no note added for this patient.
                                                    </SfMessage> // todo
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </ContentTemplate>
                            </TabItem>
                        </TabItems>
                    </SfTab>
                </FormTemplate>
                <FormButtons>
                    <SfButton type="button" CssClass="e-outline"
                              OnClick="@(() => Dialog.HideAsync())">@L["Cancel"]</SfButton>
                    <SfButton type="submit" IsPrimary>@L["Save"]</SfButton>
                </FormButtons>
            </SfDataForm>

        </Content>
    </DialogTemplates>
</SfDialog>


@code {

    [Parameter]
    public EventCallback<PatientDto> PatientCreatedAsync { get; set; }

    private SfDialog Dialog { get; set; } = null!;
    private SfAutoComplete<Guid, CountryDto> PatientCountryListAutoComplete { get; set; } = null!;
    private SfAutoComplete<Guid, CountryDto> AddressCountryListAutoComplete { get; set; } = null!;
    private SfAutoComplete<Guid, CityDto> CityListAutoComplete { get; set; } = null!;
    private SfAutoComplete<Guid, DistrictDto> DistrictListAutoComplete { get; set; } = null!;

    private PatientCreateDto NewPatient { get; set; } = new();

    private CountryDto CurrentCountry { get; set; } = new();

    private bool IsForeigner
    {
        get
        {
            var isForeigner = CurrentCountry.Id != NewPatient.CountryId;
            if (isForeigner)
            {
                NewPatient.IdentityNumber = null;
            } else
            {
                NewPatient.PassportNumber = null;
            }

            return isForeigner;
        }
    }

    private IEnumerable<PatientTypeDto> PatientTypeList { get; set; } = [];
    private IEnumerable<CountryDto> CountryList { get; set; } = [];
    private IEnumerable<CityDto> CityList { get; set; } = [];
    private IEnumerable<DistrictDto> DistrictList { get; set; } = [];

    private Guid SelectedAddressCountryId { get; set; } = Guid.Empty;
    private Guid SelectedAddressCityId { get; set; } = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        SetDefaultValuesForDialog();
        PatientTypeList = await PatientTypeAppService.GetListAsync();
        CountryList = await CountryAppService.GetListAsync(new GetCountriesInput());
        CurrentCountry = await AppDefaultAppService.GetCurrentCountryAsync();
    }

    private async Task DefaultAutoCompleteFilterAsync<TDto>(
        SfAutoComplete<Guid, TDto> autoComplete,
        IEnumerable<TDto> dataSource,
        FilteringEventArgs args
    ) =>
        await autoComplete.FilterAsync(dataSource, GetDefaultAutoCompleteQuery(args));

    private Query GetDefaultAutoCompleteQuery(FilteringEventArgs args)
    {
        args.PreventDefaultAction = true;
        var query = new Query().Where(
            new WhereFilter
            {
                Field = "Name",
                Operator = "contains",
                value = args.Text,
                IgnoreCase = true
            }
        );
        return !string.IsNullOrEmpty(args.Text) ? query : new Query();
    }

    private async Task OnSaveClickAsync()
    {
        try
        {
            var patient = await PatientAppService.CreateAsync(NewPatient);
            await PatientCreatedAsync.InvokeAsync(patient);
            await HideAsync();
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(ex);
        }
    }

    public async Task ShowAsync()
    {
        SetDefaultValuesForDialog();
        await Dialog.ShowAsync();
    }

    public async Task HideAsync()
    {
        SetDefaultValuesForDialog();
        await Dialog.HideAsync();
    }

    private async Task PatientCountryIdChangedAsync(Guid countryId)
    {
        NewPatient.CountryId = countryId;
        NewPatient.MobilePhoneNumberCode = CountryList.FirstOrDefault(e => e.Id == countryId)?.PhoneCode ?? "1";
        await Task.CompletedTask;
    }

    private void SetDefaultValuesForDialog()
    {
        SetDefaultsForPatient();
        SetDefaultsForAddress();
        SetDefaultsForNote();
    }

    private void SetDefaultsForPatient() =>
        NewPatient = new PatientCreateDto
        {
            CountryId = CurrentCountry.Id,
            MobilePhoneNumberCode = CurrentCountry.PhoneCode
        };

#region Address

    private AddressCreateDto NewAddress { get; set; } = new();
    private bool AddressEditingMode { get; set; }

    private async Task AddAddressAsync()
    {
        NewAddress.Id = Guid.NewGuid();
        NewAddress.District = DistrictList.First(e => e.Id == NewAddress.DistrictId);
        NewPatient.Addresses.Add(NewAddress);
        SetDefaultsForAddress();
        await Task.CompletedTask;
    }

    private async Task EditAddressAsync(AddressCreateDto dto)
    {
        if (NewAddress.Id == dto.Id)
        {
            return;
        }

        await AddressCountryIdChangedAsync(dto.District.City.Country.Id);
        await AddressCityIdChangedAsync(dto.District.City.Id);
        ObjectMapper.Map(dto, NewAddress);
        AddressEditingMode = true;
        await Task.CompletedTask;
    }

    private async Task RemoveAddressAsync(AddressCreateDto dto)
    {
        NewPatient.Addresses.Remove(dto);
        await Task.CompletedTask;
    }

    private async Task SaveAddressEditingAsync()
    {
        var address = NewPatient.Addresses.First(e => e.Id == NewAddress.Id);
        address.AddressLine = NewAddress.AddressLine;
        address.AddressTitle = NewAddress.AddressTitle;
        address.DistrictId = NewAddress.DistrictId;
        address.District = DistrictList.First(e => e.Id == NewAddress.DistrictId);
        SetDefaultsForAddress();
        await Task.CompletedTask;
    }

    private async Task AddressCountryIdChangedAsync(Guid countryId)
    {
        SelectedAddressCountryId = countryId;
        SelectedAddressCityId = Guid.Empty;
        NewAddress.DistrictId = Guid.Empty;
        CityList = await CityAppService.GetListWithDetailsAsync(new GetCitiesInput() { CountryId = countryId });
        DistrictList = [];
    }

    private async Task AddressCityIdChangedAsync(Guid cityId)
    {
        SelectedAddressCityId = cityId;
        NewAddress.DistrictId = Guid.Empty;
        DistrictList = await DistrictAppService.GetListWithDetailsAsync(new GetDistrictsInput() { CityId = cityId });
    }

    private void SetDefaultsForAddress()
    {
        AddressEditingMode = false;
        NewAddress = new AddressCreateDto();
        SelectedAddressCountryId = Guid.Empty;
        SelectedAddressCityId = Guid.Empty;
        CityList = [];
        DistrictList = [];
    }

#endregion

#region Note

    private PatientNoteCreateDto NewNote { get; set; } = new();
    private bool NoteEditingMode { get; set; }

    private async Task AddNoteAsync()
    {
        NewNote.Id = Guid.NewGuid();
        NewPatient.Notes.Add(NewNote);
        SetDefaultsForNote();
        await Task.CompletedTask;
    }

    private async Task EditNoteAsync(PatientNoteCreateDto dto)
    {
        if (NewNote.Id == dto.Id)
        {
            return;
        }

        NewNote.Id = dto.Id;
        NewNote.Note = dto.Note;
        NoteEditingMode = true;
        await Task.CompletedTask;
    }

    private async Task RemoveNoteAsync(PatientNoteCreateDto dto)
    {
        NewPatient.Notes.Remove(dto);
        await Task.CompletedTask;
    }

    private async Task CancelNoteEditingAsync()
    {
        SetDefaultsForNote();
        await Task.CompletedTask;
    }

    private async Task SaveNoteEditingAsync()
    {
        var note = NewPatient.Notes.First(e => e.Id == NewNote.Id);
        note.Note = NewNote.Note;
        await CancelNoteEditingAsync();
    }

    private void SetDefaultsForNote()
    {
        NoteEditingMode = false;
        NewNote = new PatientNoteCreateDto();
    }

#endregion

}