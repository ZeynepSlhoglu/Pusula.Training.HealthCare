@using Pusula.Training.HealthCare.Cities
@using Pusula.Training.HealthCare.Countries
@using Pusula.Training.HealthCare.Districts
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DataForm
@using Blazored.FluentValidation
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons

@inherits HealthCareComponentBase

@inject IDistrictAppService DistrictAppService
@inject ICityAppService CityAppService


<SfDialog @ref="Dialog" Target="#target" Width="500px" IsModal ShowCloseIcon Visible="false">
    <DialogTemplates>
        <Header>@L["NewDistrict"]</Header>
        <Content>
            <SfDataForm ID="NewDistrictForm"
                        EditContext="@EditingDistrictEditContext"
                        ButtonsAlignment="FormButtonsAlignment.Right"
                        OnValidSubmit="@OnSaveClickAsync"
                        ValidationDisplayMode="FormValidationDisplay.Tooltip">
                <FormValidator>
                    <FluentValidationValidator Validator="@EditingDistrictValidator"></FluentValidationValidator>
                </FormValidator>
                <FormTemplate>
                    <div class="d-flex flex-column gap-2">
                        <SfTextBox @bind-Value="@EditingDistrict.Name"
                                   Placeholder="@L["District"]" FloatLabelType="FloatLabelType.Always"></SfTextBox>
                        
                   <SfDropDownList TValue="Guid?"
                                TItem="CityDto" Placeholder="@L["City"]"
                                DataSource="@CityList" AllowFiltering EnableVirtualization
                                ShowClearButton PopupHeight="300px">
                            <DropDownListEvents TItem="CityDto" TValue="Guid?"></DropDownListEvents>
                    <DropDownListFieldSettings Text="Name" Value="Id"/>
                </SfDropDownList>

                               </div>
                </FormTemplate>
                <FormButtons>
                    <SfButton type="button" CssClass="e-outline"
                              OnClick="@(() => Dialog.HideAsync())">@L["Cancel"]</SfButton>
                    <SfButton type="submit" IsPrimary>@L["Save"]</SfButton>
                </FormButtons>
            </SfDataForm>

        </Content>
    </DialogTemplates>
</SfDialog>

@code {

    [Parameter] public EventCallback<DistrictUpdateDto> OnValidSaveAsync { get; set; }

    private SfDialog Dialog { get; set; } = null!;

    private EditContext EditingDistrictEditContext { get; set; } = null!;

    private DistrictUpdateDto EditingDistrict { get; set; } = new();

    private DistrictUpdateDtoValidator EditingDistrictValidator { get; set; } = null!;

    private IReadOnlyList<CityDto> CityList { get; set; } = [];


    private async Task OnSaveClickAsync(EditContext context)
    {
        await OnValidSaveAsync.InvokeAsync(EditingDistrict);
        await HideAsync();
    }

    public async Task ShowAsync(Guid districtId)
    {
        var city = await DistrictAppService.GetAsync(districtId);
        ObjectMapper.Map(city, EditingDistrict);
        EditingDistrictEditContext = new EditContext(EditingDistrict);
        await Dialog.ShowAsync();
    }

    public async Task HideAsync()
    {
        EditingDistrict = new DistrictUpdateDto();
        await Dialog.HideAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        CityList = await CityAppService.GetListWithDetailsAsync();
    }

}
