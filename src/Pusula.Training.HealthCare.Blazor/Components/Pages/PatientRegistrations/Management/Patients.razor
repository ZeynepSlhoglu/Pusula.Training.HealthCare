@page "/prm/management/patients"

@attribute [Authorize(HealthCarePermissions.Patients.Default)]
@using Pusula.Training.HealthCare.Patients
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using Pusula.Training.HealthCare.Permissions
@using Volo.Abp.Http.Client
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DataForm
@using Syncfusion.Blazor.Navigations
@using Blazored.FluentValidation
@using Microsoft.AspNetCore.Hosting
@using Pusula.Training.HealthCare.Blazor.Components.Dialogs.Protocols
@using Pusula.Training.HealthCare.Blazor.Components.Dialogs.Patients
@using Position = Syncfusion.Blazor.Popups.Position
@using Syncfusion.Blazor.SplitButtons

@inherits HealthCareComponentBase
@inject IPatientAppService PatientAppService
@inject SfDialogService DialogService
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager

<PageHeader Title="Patients" BreadcrumbItems="BreadcrumbItems"/>

@* ************************* SEARCH ************************* *@
<div class="bg-white mb-3">
    <SfDataForm EditContext="@FilterContext" OnValidSubmit="@SearchAsync"
                ButtonsAlignment="FormButtonsAlignment.Stretch"
                ValidationDisplayMode="FormValidationDisplay.Tooltip">
        <FormValidator>
            <FluentValidationValidator
                Validator="@FilterValidator"></FluentValidationValidator>
        </FormValidator>
        <FormTemplate>
            <div class="p-2">
                <SfTextBox @bind-Value="@Filter.FilterText" Placeholder="@L["Search:Patient"]" Type="InputType.Search"
                           CssClass="mb-2"/>
                <a href="javascript:;" class="text-decoration-none"
                   @onclick="@(() => ShowAdvancedFilters = !ShowAdvancedFilters)">
                    @L["SeeAdvancedFilters"] <SfIcon
                        IconCss="@($"e-icons fas fa-chevron-{(ShowAdvancedFilters ? "up" : "down")}")"/>
                </a>
            </div>
            <hr class="m-0">
            @* ************************* ADVANCED FILTER ************************* *@
            @if (ShowAdvancedFilters)
            {
                <div class="d-flex gap-2 p-2 align-items-end">
                    <SfNumericTextBox @bind-Value="@Filter.No" ShowSpinButton="false"
                                      FloatLabelType="FloatLabelType.Always"
                                      Placeholder="@L["No"]" Min="0"/>
                    <SfTextBox @bind-Value="@Filter.FullName" FloatLabelType="FloatLabelType.Always"
                               Placeholder="@L["Name"]"/>
                    <SfTextBox @bind-Value="@Filter.IdentityNumber" FloatLabelType="FloatLabelType.Always"
                               Placeholder="@L["IdentityNumber"]" Type="InputType.Number"/>
                    <SfTextBox @bind-Value="@Filter.PassportNumber" FloatLabelType="FloatLabelType.Always"
                               Placeholder="@L["PassportNumber"]" Type="InputType.Number"/>
                    <SfTextBox @bind-Value="@Filter.MobilePhoneNumber" FloatLabelType="FloatLabelType.Always"
                               Placeholder="@L["MobilePhoneNumber"]" Type="InputType.Number"/>
                    <SfButton type="submit" IsPrimary CssClass="e-outline" IconCss="e-icons e-filter"
                              IconPosition="IconPosition.Left">@L["ApplyFilter"]</SfButton>
                </div>
            }
        </FormTemplate>
        <FormButtons></FormButtons>
    </SfDataForm>
</div>

@* ************************* DATA GRID ************************* *@
<SfGrid @ref="SfGrid" TValue="PatientWithNavigationPropertiesDto" Height="600px" DataSource="@PatientList"
        AllowSelection="@CanDeletePatient" EnableHover EnableVirtualMaskRow EnableStickyHeader>
    <SfToolbar>
        <ToolbarItems>
            <ToolbarItem Type="@ItemType.Button" OnClick="OpenCreatePatientDialogAsync" Text="@L["Add"]"
                         PrefixIcon="e-icons fas fa-plus" TooltipText="@L["NewPatient"]"
                         Disabled="@(!CanCreatePatient)"></ToolbarItem>
            <ToolbarItem Type="@ItemType.Button" OnClick="DeleteSelectedPatientsAsync"
                         Disabled="@(SfGrid.SelectedRecords.Count == 0 || !CanDeletePatient)"
                         Text="@L["Delete"]" PrefixIcon="e-icons fas fa-trash-alt"
                         TooltipText="@L["Delete"]"></ToolbarItem>
            <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>
            <ToolbarItem Type="@ItemType.Button" PrefixIcon="e-icons far fa-file-excel"
                         Text="@L["ExportExcel"]" TooltipText="@L["ExportExcel"]"
                         OnClick="@DownloadAsExcelAsync"></ToolbarItem>
        </ToolbarItems>
    </SfToolbar>
    <GridEvents TValue="PatientWithNavigationPropertiesDto"
                RowSelected="@SelectedPatientRowChangedAsync"
                RowDeselected="@SelectedPatientRowChangedAsync"/>
    <GridSelectionSettings CheckboxOnly PersistSelection/>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="30" Visible="@CanDeletePatient"></GridColumn>
        <GridColumn HeaderText="@L["Patient"]">
            <Template>
                @{
                    var dto = (context as PatientWithNavigationPropertiesDto)!;
                    <div class="fw-500">
                        @dto.Patient.FullName
                    </div>
                    <div class="d-flex align-items-center gap-1">
                        <PatientGenderIcon Gender="@dto.Patient.Gender"/>
                        <div>
                            <span>Hasta No:</span>
                            <span>@dto.Patient.No</span>
                        </div>
                        <span class="vr"></span>
                        <div>
                            @dto.Country.Iso
                        </div>
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn HeaderText="@L["IdentityOrPassportNumber"]">
            <Template>
                @{
                    var dto = (context as PatientWithNavigationPropertiesDto)!;
                    @(dto.Patient.IdentityNumber ?? dto.Patient.PassportNumber)
                    if (dto.Patient.IdentityNumber.IsNullOrWhiteSpace())
                    {
                        <SfIcon IconCss="fas fa-passport color-blue-grey-500 ms-1"></SfIcon>
                    }
                }
            </Template>
        </GridColumn>

        <GridColumn HeaderText="@L["BirthDate"]">
            <Template>
                @{
                    var dto = (context as PatientWithNavigationPropertiesDto)!;
                    <div class="d-flex gap-1">
                        <span>@dto.Patient.BirthDate.ToString("dd.MM.yyyy")</span>
                        <span class="fs-12p">(@dto.Patient.Age.Item1 @dto.Patient.Age.Item2)</span>
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn HeaderText="@L["EmailAddress"]">
            <Template>
                @{
                    var dto = (context as PatientWithNavigationPropertiesDto)!;
                    <div>
                        @dto.Patient.EmailAddress
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn HeaderText="@L["MobilePhoneNumber"]">
            <Template>
                @{
                    var dto = (context as PatientWithNavigationPropertiesDto)!;
                    <div>
                        +@dto.Patient.MobilePhoneNumberCode @dto.Patient.MobilePhoneNumber
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn TextAlign="TextAlign.Right">
            <Template>
                @{
                    var patient = (context as PatientWithNavigationPropertiesDto)!.Patient;
                }
                <div class="d-flex justify-content-end gap-1">
                    <SfTooltip Position="Position.BottomCenter" Content="@L["Detail"]">
                        <SfButton
                            OnClick="@(() => NavigationManager.NavigateTo($"prm/management/patient-detail/{patient.No}"))"
                            CssClass="e-flat"
                            IconCss="e-icons fas fa-external-link-alt"></SfButton>
                    </SfTooltip>

                    <SfDropDownButton IconCss="fas fa-ellipsis-h" CssClass="e-caret-hide e-flat"
                                      IconPosition="SplitButtonIconPosition.Top">
                        <DropDownButtonEvents ItemSelected="@((args) => DropdownItemSelectedAsync(args, patient))"/>
                        <DropDownMenuItems>
                            <DropDownMenuItem Text="@L["AddProtocol"]" IconCss="e-icons fas fa-file-medical"/>
                            @if (CanEditPatient)
                            {
                                <DropDownMenuItem Text="@L["Edit"]" IconCss="e-icons far fa-edit"/>
                            }
                            @if (CanDeletePatient)
                            {
                                <DropDownMenuItem Text="@L["Delete"]" IconCss="e-icons far fa-trash-alt"/>
                            }
                        </DropDownMenuItems>
                    </SfDropDownButton>
                </div>
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

@* ************************* CREATE MODAL ************************* *@
<PatientCreateDialog @ref="CreatePatientDialog" PatientCreatedAsync="GetPatientsAsync"/>

@* ************************* UPDATE MODAL ************************* *@
<PatientUpdateDialog @ref="UpdatePatientDialog" OnValidSaveAsync="UpdatePatientAsync"/>

@* ************************* CREATE PROTOCOL MODAL ************************* *@
<ProtocolCreateDialog @ref="CreateProtocolDialog" ProtocolCreatedAsync="SendNotificationToDoctorAsync"/>

<style>
    .e-btn.e-top-icon-btn {
        padding: 4px 11px !important;
    }

    .e-btn-icon.e-icon-top {
        padding-bottom: 0 !important;
    }
</style>