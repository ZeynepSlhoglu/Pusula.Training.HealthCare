@page "/patients"

@attribute [Authorize(HealthCarePermissions.Patients.Default)]
@using Pusula.Training.HealthCare.Patients
@using Pusula.Training.HealthCare.Localization
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@using Pusula.Training.HealthCare.Permissions
@using Volo.Abp.AspNetCore.Components.Web
@using Pusula.Training.HealthCare.Countries
@using Pusula.Training.HealthCare.PatientTypes
@using Volo.Abp.Http.Client
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Position = Syncfusion.Blazor.Popups.Position
@using Syncfusion.Blazor.DataForm
@using Syncfusion.Blazor.Navigations
@inherits HealthCareComponentBase
@inject IPatientAppService PatientAppService
@inject IPatientTypeAppService PatientTypeAppService
@inject ICountryAppService CountryAppService
@inject SfDialogService DialogService
@inject AbpBlazorMessageLocalizerHelper<HealthCareResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager

<PageHeader BreadcrumbItems="BreadcrumbItems"/>

@* ************************* SEARCH ************************* *@
<div class="bg-white mb-3">
    <EditForm Model="@Filter" OnSubmit="@SearchAsync">
        <div class="p-2">
            <SfTextBox @bind-Value="@Filter.FilterText" Placeholder="@L["Search"]"/>
        </div>
        <hr class="m-0">
        <div class=" d-flex gap-2 p-2 align-items-end">
            <SfTextBox @bind-Value="@Filter.FirstName" FloatLabelType="FloatLabelType.Always"
                       Placeholder="@L["FirstName"]"/>
            <SfTextBox @bind-Value="@Filter.LastName" FloatLabelType="FloatLabelType.Always"
                       Placeholder="@L["LastName"]"/>
            <SfTextBox @bind-Value="@Filter.IdentityNumber" FloatLabelType="FloatLabelType.Always"
                       Placeholder="@L["IdentityNumber"]"/>
            <SfTextBox @bind-Value="@Filter.PassportNumber" FloatLabelType="FloatLabelType.Always"
                       Placeholder="@L["PassportNumber"]"/>
            <SfTextBox @bind-Value="@Filter.MobilePhoneNumber" FloatLabelType="FloatLabelType.Always"
                       Placeholder="@L["MobilePhoneNumber"]"/>
            <SfButton type="submit" IsPrimary CssClass="e-outline" IconCss="e-icons e-filter"
                      IconPosition="IconPosition.Left">@L["ApplyFilter"]</SfButton>
        </div>
    </EditForm>
</div>

@* ************************* DATA GRID ************************* *@
<SfGrid @ref="SfGrid" DataSource="@PatientList" AllowPaging AllowSelection EnableHover>
    <SfToolbar>
        <ToolbarItems>
            <ToolbarItem Type="@ItemType.Button" OnClick="OpenCreatePatientDialogAsync" Text="@L["Add"]"
                         PrefixIcon="e-icons e-plus" TooltipText="@L["NewPatient"]"></ToolbarItem>
            <ToolbarItem Type="@ItemType.Button" OnClick="DeleteSelectedPatientsAsync"
                         Disabled="@(SfGrid.SelectedRecords.Count == 0)"
                         Text="@L["Delete"]" PrefixIcon="e-icons e-delete"
                         TooltipText="@L["Delete"]"></ToolbarItem>
            <ToolbarItem Type="@ItemType.Separator"></ToolbarItem>
            <ToolbarItem Type="@ItemType.Button" PrefixIcon="e-icons far fa-file-excel"
                         Text="@L["ExportExcel"]" TooltipText="@L["ExportExcel"]"
                         OnClick="@DownloadAsExcelAsync"></ToolbarItem>
        </ToolbarItems>
    </SfToolbar>
    <GridEvents TValue="PatientWithNavigationPropertiesDto"
                RowSelected="@SelectedPatientRowChangedAsync"
                RowDeselected="@SelectedPatientRowChangedAsync"
                OnRecordDoubleClick="@((args) => OpenEditPatientModalAsync(args.RowData.Patient))"/>
    <GridSelectionSettings CheckboxOnly PersistSelection/>
    <GridColumns>
        <GridColumn Type="ColumnType.CheckBox" Width="30"></GridColumn>
        <GridColumn HeaderText="@L["FullName"]">
            <Template>
                @{
                    var dto = context as PatientWithNavigationPropertiesDto;
                    <div>
                        <SfIcon
                            IconCss="@($"fs-18p fas {(dto.Patient.Gender == EnumGender.Male ? "fa-mars color-blue-500" : "fa-venus color-pink-500")}")"></SfIcon>
                        <span>@dto.Patient.FullName</span>
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn HeaderText="@L["IdentityOrPassportNumber"]">
            <Template>
                @{
                    var dto = context as PatientWithNavigationPropertiesDto;
                    @(dto.Patient.IdentityNumber ?? dto.Patient.PassportNumber)
                }
            </Template>
        </GridColumn>

        <GridColumn HeaderText="@L["Race"]">
            <Template>
                @{
                    var dto = context as PatientWithNavigationPropertiesDto;
                    <div>
                        <SfIcon IconCss="fas fa-map-marker-alt color-blue-grey-300"></SfIcon>
                        <span>@dto.Country.Name</span>
                    </div>
                }
            </Template>
        </GridColumn>

        <GridColumn HeaderText="@L["BirthDate"]">
            <Template>
                @{
                    var dto = context as PatientWithNavigationPropertiesDto;
                    <div class="d-flex gap-1">
                        <span>@dto.Patient.BirthDate.ToString("d")</span>
                        <span>(@dto.Patient.Age.Item1 @dto.Patient.Age.Item2)</span>
                    </div>
                }
            </Template>
        </GridColumn>
        <GridColumn Field="@nameof(PatientWithNavigationPropertiesDto.Patient.EmailAddress)"
                    HeaderText="@L["EmailAddress"]"/>
        <GridColumn Field="@nameof(PatientWithNavigationPropertiesDto.Patient.MobilePhoneNumber)"
                    HeaderText="@L["MobilePhoneNumber"]"/>
        <GridColumn TextAlign="TextAlign.Right">
            <Template>
                <SfButton
                    OnClick="@(() => OpenEditPatientModalAsync((context as PatientWithNavigationPropertiesDto).Patient))"
                    CssClass="e-flat"
                    IconCss="e-icons e-edit"></SfButton>
                <SfButton OnClick="@(() => DeletePatientAsync((context as PatientWithNavigationPropertiesDto).Patient))"
                          CssClass="e-flat"
                          IconCss="e-icons e-trash"></SfButton>
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

@* ************************* CREATE MODAL ************************* *@
<PatientCreateDialog @ref="CreatePatientDialog" CountryList="@CountryList" PatientTypeList="@PatientTypeList"
                     OnValidSaveAsync="CreatePatientAsync"/>

@* ************************* UPDATE MODAL ************************* *@
<PatientUpdateDialog @ref="UpdatePatientDialog" CountryList="@CountryList" PatientTypeList="@PatientTypeList"
                     OnValidSaveAsync="UpdatePatientAsync"/>