trigger:
  branches:
    include:
      - development

pool:
  name: pusula-akademi-team3-agent
  demands:
    - agent.name -equals team3-node1

variables:
  SONARQUBE_ENDPOINT: 'http://64.226.68.43:9000'
  SONARQUBE_PROJECT_KEY: 'Pusula.Training.HealthCare.Team3_Pusula.Training.HealthCare_AZPqdOnHHu30eRZfQ0dT'
  SONARQUBE_PROJECT_NAME: 'Pusula.Training.HealthCare'
  SONARQUBE_PROJECT_VERSION: '1.0'

steps:
- bash: |
    # Install SonarScanner globally if not already installed
    dotnet tool install --global dotnet-sonarscanner || echo "SonarScanner already installed"
    export PATH="$PATH:/root/.dotnet/tools"
  displayName: 'Install SonarScanner'

- bash: |
    # Start SonarScanner and begin the analysis
    dotnet sonarscanner begin \
      /k:"$(SONARQUBE_PROJECT_KEY)" \
      /n:"$(SONARQUBE_PROJECT_NAME)" \
      /v:"$(SONARQUBE_PROJECT_VERSION)" \
      /d:sonar.host.url="$(SONARQUBE_ENDPOINT)" \
      /d:sonar.login="$(SONARQUBE_TOKEN)"
  displayName: 'Prepare SonarQube Analysis'

- bash: |
    # Build the project for analysis
    dotnet build src/Pusula.Training.HealthCare.Blazor/Pusula.Training.HealthCare.Blazor.csproj --configuration Release
  displayName: 'Build Project'

- bash: |
    # Complete SonarScanner analysis
    dotnet sonarscanner end /d:sonar.login="$(SONARQUBE_TOKEN)"
  displayName: 'Run SonarQube Analysis'
